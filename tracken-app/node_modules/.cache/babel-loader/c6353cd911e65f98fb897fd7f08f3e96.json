{"ast":null,"code":"import _defineProperty from \"/home/vlad/Desktop/repos/jfdd11-nan-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/vlad/Desktop/repos/jfdd11-nan-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vlad/Desktop/repos/jfdd11-nan-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/vlad/Desktop/repos/jfdd11-nan-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/vlad/Desktop/repos/jfdd11-nan-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/vlad/Desktop/repos/jfdd11-nan-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/vlad/Desktop/repos/jfdd11-nan-app/src/components/SendParcel/SendParcel.js\";\nimport React, { Component } from \"react\";\nimport { Form, Input, Button, Segment, Header } from \"semantic-ui-react\";\nimport firebase from \"firebase\";\nimport DayPickerInput from \"react-day-picker/DayPickerInput\";\nimport \"react-day-picker/lib/style.css\";\nimport moment from \"moment\";\nimport \"./SendParcel.css\";\nvar initialState = {\n  selectedDay: \"\",\n  recipientName: \"\",\n  phone: \"\",\n  city: \"\",\n  postalCode: \"\",\n  streetName: \"\",\n  streetNumber: \"\",\n  country: \"\",\n  parcelWeight: \"\",\n  parcelDepth: \"\",\n  parcelHeight: \"\",\n  parcelWidth: \"\",\n  lat: \"\",\n  lng: \"\"\n};\nvar googleApiKey = \"AIzaSyAUsnERWvgUrNKQy4YvHAaeg99HdhJLpTM\";\n\nvar SendParcel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SendParcel, _Component);\n\n  function SendParcel() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SendParcel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SendParcel)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = initialState;\n\n    _this.addParcel = function () {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state,\n          selectedDay = _ref.selectedDay,\n          recipientName = _ref.recipientName,\n          phone = _ref.phone,\n          city = _ref.city,\n          postalCode = _ref.postalCode,\n          streetName = _ref.streetName,\n          streetNumber = _ref.streetNumber,\n          country = _ref.country,\n          parcelWeight = _ref.parcelWeight,\n          parcelDepth = _ref.parcelDepth,\n          parcelHeight = _ref.parcelHeight,\n          parcelWidth = _ref.parcelWidth,\n          lat = _ref.lat,\n          lng = _ref.lng;\n\n      firebase.database().ref(\"packages\").push({\n        date_send: selectedDay ? selectedDay : moment(new Date()).format(\"YYYY-MM-DD\"),\n        client_id: _this.props.clientID,\n        delivery: {\n          name: recipientName,\n          phone: phone,\n          city: city,\n          postalcode: postalCode,\n          street: streetName,\n          number: streetNumber,\n          country: country\n        },\n        dimensions: {\n          weight: parcelWeight,\n          depth: parcelDepth,\n          height: parcelHeight,\n          width: parcelWidth\n        },\n        latitude: lat,\n        longitude: lng,\n        status: \"pending\",\n        date_order: moment(new Date()).format(\"YYYY-MM-DD\")\n      });\n    };\n\n    _this.syncGeoLocation = function () {\n      return fetch(\"https://maps.googleapis.com/maps/api/geocode/json?key=\\n    \".concat(googleApiKey, \"&address=\").concat(_this.state.city, \"+\").concat(_this.state.postalCode, \"+\").concat(_this.state.streetName, \"+\").concat(_this.state.streetNumber)).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        return data.results;\n      }).then(function (results) {\n        return results[0].geometry.location;\n      }).then(function (coords) {\n        return _this.setState({\n          lat: coords.lat,\n          lng: coords.lng\n        });\n      });\n    };\n\n    _this.handleChange = function (event) {\n      var id = event.target.id;\n      var value = event.target.value;\n\n      _this.setState(_defineProperty({}, id, value));\n    };\n\n    _this.handleDayChange = function (selectedDay, modifiers, dayPickerInput) {\n      var input = dayPickerInput.getInput();\n\n      _this.setState({\n        selectedDay: moment(selectedDay).format(\"YYYY-MM-DD\"),\n        isEmpty: !input.value.trim(),\n        isValidDay: typeof selectedDay !== \"undefined\",\n        isDisabled: modifiers.disabled === true\n      });\n    };\n\n    _this.handleSubmit = function (event) {\n      event.preventDefault();\n\n      _this.syncGeoLocation().then(function () {\n        _this.addParcel();\n\n        _this.setState(initialState);\n\n        _this.props.refreshView();\n\n        _this.props.closeSendParcel();\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(SendParcel, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(Segment, {\n        color: \"purple\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"Please fill the form below to send a new package\"), React.createElement(Segment, {\n        color: \"purple\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(DayPickerInput, {\n        placeholder: moment(new Date()).format(\"YYYY-MM-DD\"),\n        onDayChange: this.handleDayChange,\n        selectedDay: this.state.selectedDay,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      })), React.createElement(Header, {\n        as: \"h4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"Recipient details\"), React.createElement(Segment, {\n        color: \"purple\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        widths: \"equal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(Form.Field, {\n        id: \"recipientName\",\n        control: Input,\n        label: \"Recipient name\",\n        placeholder: \"Recipient name\",\n        value: this.state.recipientName,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }), React.createElement(Form.Field, {\n        id: \"phone\",\n        control: Input,\n        label: \"Phone number\",\n        placeholder: \"Phone number\",\n        value: this.state.phone,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }), React.createElement(Form.Field, {\n        id: \"city\",\n        control: Input,\n        label: \"City\",\n        placeholder: \"City\",\n        value: this.state.city,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }), React.createElement(Form.Field, {\n        id: \"postalCode\",\n        control: Input,\n        label: \"Postal Code\",\n        placeholder: \"Postal Code\",\n        value: this.state.postalCode,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }), React.createElement(Form.Field, {\n        id: \"streetName\",\n        control: Input,\n        label: \"Street name\",\n        placeholder: \"Street name\",\n        value: this.state.streetName,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }), React.createElement(Form.Field, {\n        id: \"streetNumber\",\n        control: Input,\n        label: \"Street number\",\n        placeholder: \"Steet number\",\n        value: this.state.streetNumber,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }), React.createElement(Form.Field, {\n        id: \"country\",\n        control: Input,\n        label: \"Country\",\n        placeholder: \"Country\",\n        value: this.state.country,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }))), React.createElement(Header, {\n        as: \"h4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, \"Parcel details\"), React.createElement(Segment, {\n        color: \"purple\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        widths: \"equal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(Form.Field, {\n        id: \"parcelWeight\",\n        control: Input,\n        label: \"Parcel weight\",\n        placeholder: \"Parcel weight\",\n        value: this.state.parcelWeight,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }), React.createElement(Form.Field, {\n        id: \"parcelWidth\",\n        control: Input,\n        label: \"Parcel width\",\n        placeholder: \"Parcel width\",\n        value: this.state.parcelWidth,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }), React.createElement(Form.Field, {\n        id: \"parcelHeight\",\n        control: Input,\n        label: \"Parcel height\",\n        placeholder: \"Parcel height\",\n        value: this.state.parcelHeight,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }), React.createElement(Form.Field, {\n        id: \"parcelDepth\",\n        control: Input,\n        label: \"Parcel depth\",\n        placeholder: \"Parcel depth\",\n        value: this.state.parcelDepth,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }))), React.createElement(Segment, {\n        basic: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, React.createElement(Form.Field, {\n        id: \"sendParcel\",\n        control: Button,\n        content: \"Send parcel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return SendParcel;\n}(Component);\n\nexport default SendParcel;","map":{"version":3,"sources":["/home/vlad/Desktop/repos/jfdd11-nan-app/src/components/SendParcel/SendParcel.js"],"names":["React","Component","Form","Input","Button","Segment","Header","firebase","DayPickerInput","moment","initialState","selectedDay","recipientName","phone","city","postalCode","streetName","streetNumber","country","parcelWeight","parcelDepth","parcelHeight","parcelWidth","lat","lng","googleApiKey","SendParcel","state","addParcel","database","ref","push","date_send","Date","format","client_id","props","clientID","delivery","name","postalcode","street","number","dimensions","weight","depth","height","width","latitude","longitude","status","date_order","syncGeoLocation","fetch","then","response","json","data","results","geometry","location","coords","setState","handleChange","event","id","target","value","handleDayChange","modifiers","dayPickerInput","input","getInput","isEmpty","trim","isValidDay","isDisabled","disabled","handleSubmit","preventDefault","refreshView","closeSendParcel"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, Input, Button, Segment, Header } from \"semantic-ui-react\";\nimport firebase from \"firebase\";\n\nimport DayPickerInput from \"react-day-picker/DayPickerInput\";\nimport \"react-day-picker/lib/style.css\";\nimport moment from \"moment\";\n\nimport \"./SendParcel.css\";\n\nconst initialState = {\n  selectedDay: \"\",\n  recipientName: \"\",\n  phone: \"\",\n  city: \"\",\n  postalCode: \"\",\n  streetName: \"\",\n  streetNumber: \"\",\n  country: \"\",\n  parcelWeight: \"\",\n  parcelDepth: \"\",\n  parcelHeight: \"\",\n  parcelWidth: \"\",\n  lat:\"\",\n  lng:\"\"\n};\nconst googleApiKey = \"AIzaSyAUsnERWvgUrNKQy4YvHAaeg99HdhJLpTM\";\n\nclass SendParcel extends Component {\n  state = initialState;\n\n  addParcel = (\n    {\n      selectedDay,\n      recipientName,\n      phone,\n      city,\n      postalCode,\n      streetName,\n      streetNumber,\n      country,\n      parcelWeight,\n      parcelDepth,\n      parcelHeight,\n      parcelWidth,\n      lat,\n      lng\n    } = this.state\n  ) => {\n    firebase\n      .database()\n      .ref(\"packages\")\n      .push({\n        date_send: selectedDay ? selectedDay : moment(new Date()).format(\"YYYY-MM-DD\"),\n        client_id:this.props.clientID,\n        delivery: {\n          name: recipientName,\n          phone,\n          city,\n          postalcode: postalCode,\n          street: streetName,\n          number: streetNumber,\n          country\n        },\n        dimensions: {\n          weight: parcelWeight,\n          depth: parcelDepth,\n          height: parcelHeight,\n          width: parcelWidth\n        },\n        latitude:lat,\n        longitude:lng,\n        status: \"pending\",\n        date_order: moment(new Date()).format(\"YYYY-MM-DD\")\n      });\n  };\n\n  syncGeoLocation = () =>\n  fetch(\n    `https://maps.googleapis.com/maps/api/geocode/json?key=\n    ${googleApiKey}&address=${this.state.city}+${this.state.postalCode}+${this.state.streetName}+${this.state.streetNumber}`\n  ).then(response => response.json())\n  .then(data=>data.results)\n  .then(results=>results[0].geometry.location)\n  .then(coords => this.setState({\n    lat:coords.lat,lng:coords.lng\n  }))\n\n  handleChange = event => {\n    const id = event.target.id;\n    const value = event.target.value;\n    this.setState({\n      [id]: value\n    });\n  };\n\n  handleDayChange = (selectedDay, modifiers, dayPickerInput) => {\n    const input = dayPickerInput.getInput();\n    this.setState({\n      selectedDay: moment(selectedDay).format(\"YYYY-MM-DD\"),\n      isEmpty: !input.value.trim(),\n      isValidDay: typeof selectedDay !== \"undefined\",\n      isDisabled: modifiers.disabled === true\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.syncGeoLocation().then(()=>{\n      this.addParcel()\n      this.setState(initialState);\n    this.props.refreshView();\n    this.props.closeSendParcel();\n    })\n  };\n\n  render() {\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <Segment color=\"purple\">\n          <Header as=\"h4\">\n            Please fill the form below to send a new package\n          </Header>\n          <Segment color=\"purple\">\n            <DayPickerInput\n              placeholder={moment(new Date()).format(\"YYYY-MM-DD\")}\n              onDayChange={this.handleDayChange}\n              selectedDay={this.state.selectedDay}\n            />\n          </Segment>\n          <Header as=\"h4\">Recipient details</Header>\n          <Segment color=\"purple\">\n            <Form.Group widths=\"equal\">\n              <Form.Field\n                id=\"recipientName\"\n                control={Input}\n                label=\"Recipient name\"\n                placeholder=\"Recipient name\"\n                value={this.state.recipientName}\n                onChange={this.handleChange}\n              />\n              <Form.Field\n                id=\"phone\"\n                control={Input}\n                label=\"Phone number\"\n                placeholder=\"Phone number\"\n                value={this.state.phone}\n                onChange={this.handleChange}\n              />\n              <Form.Field\n                id=\"city\"\n                control={Input}\n                label=\"City\"\n                placeholder=\"City\"\n                value={this.state.city}\n                onChange={this.handleChange}\n              />\n              <Form.Field\n                id=\"postalCode\"\n                control={Input}\n                label=\"Postal Code\"\n                placeholder=\"Postal Code\"\n                value={this.state.postalCode}\n                onChange={this.handleChange}\n              />\n              <Form.Field\n                id=\"streetName\"\n                control={Input}\n                label=\"Street name\"\n                placeholder=\"Street name\"\n                value={this.state.streetName}\n                onChange={this.handleChange}\n              />\n              <Form.Field\n                id=\"streetNumber\"\n                control={Input}\n                label=\"Street number\"\n                placeholder=\"Steet number\"\n                value={this.state.streetNumber}\n                onChange={this.handleChange}\n              />\n              <Form.Field\n                id=\"country\"\n                control={Input}\n                label=\"Country\"\n                placeholder=\"Country\"\n                value={this.state.country}\n                onChange={this.handleChange}\n              />\n            </Form.Group>\n          </Segment>\n          <Header as=\"h4\">Parcel details</Header>\n          <Segment color=\"purple\">\n            <Form.Group widths=\"equal\">\n              <Form.Field\n                id=\"parcelWeight\"\n                control={Input}\n                label=\"Parcel weight\"\n                placeholder=\"Parcel weight\"\n                value={this.state.parcelWeight}\n                onChange={this.handleChange}\n              />\n              <Form.Field\n                id=\"parcelWidth\"\n                control={Input}\n                label=\"Parcel width\"\n                placeholder=\"Parcel width\"\n                value={this.state.parcelWidth}\n                onChange={this.handleChange}\n              />\n              <Form.Field\n                id=\"parcelHeight\"\n                control={Input}\n                label=\"Parcel height\"\n                placeholder=\"Parcel height\"\n                value={this.state.parcelHeight}\n                onChange={this.handleChange}\n              />\n              <Form.Field\n                id=\"parcelDepth\"\n                control={Input}\n                label=\"Parcel depth\"\n                placeholder=\"Parcel depth\"\n                value={this.state.parcelDepth}\n                onChange={this.handleChange}\n              />\n            </Form.Group>\n          </Segment>\n          <Segment basic>\n            <Form.Field\n              id=\"sendParcel\"\n              control={Button}\n              content=\"Send parcel\"\n            />\n          </Segment>\n        </Segment>\n      </Form>\n    );\n  }\n}\n\nexport default SendParcel;\n"]},"metadata":{},"sourceType":"module"}